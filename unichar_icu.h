/**
 * Unicode Character Utility Extension for PHP
 *
 * Copyright (c) 2007-2010 Ryusuke SEKIYAMA. All rights reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 * @package     php-unichar
 * @author      Ryusuke SEKIYAMA <rsky0711@gmail.com>
 * @copyright   2007-2010 Ryusuke SEKIYAMA
 * @license     http://www.opensource.org/licenses/mit-license.php  MIT License
 */

#ifndef _PHP_UNICHAR_ICU_H_
#define _PHP_UNICHAR_ICU_H_

#include <unicode/uchar.h>
#include <unicode/uscript.h>
#include <unicode/ucnv.h>
#include <unicode/unorm.h>

/* {{{ type definitions */

typedef struct _unichar_ucnv_t {
	UConverter *ptr;
	zend_bool is_default;
} unichar_ucnv_t;
/* }}} */

/* {{{ globals */

static char unichar_icu_library_version[U_MAX_VERSION_STRING_LENGTH] = {'\0'};
static char unichar_icu_unicode_version[U_MAX_VERSION_STRING_LENGTH] = {'\0'};

/* }}} */

/* {{{ utility macros */

#ifdef ZEND_UNICODE_H
#define od_umalloc(size) eumalloc(size)
#define od_ufree(ptr, type) if (type != IS_UNICODE) { efree(ptr); }
#define UC_RETURN_TEXTL(u, s, l, t, b) { \
	if (t == IS_UNICODE) { \
		RETURN_UNICODEL(u, l, b); \
	} else { \
		RETURN_STRINGL(s, l, b); \
	} \
}
#define UC_RETURN_EMPTY_TEXT(t) { \
	if (t == IS_UNICODE) { \
		RETURN_EMPTY_UNICODE(); \
	} else { \
		RETURN_EMPTY_STRING(); \
	} \
}
#else /* ZEND_UNICODE_H */
#define od_umalloc(size) (UChar *)emalloc(sizeof(UChar) * (size))
#define od_ufree(ptr, type) efree(ptr)
#define UC_RETURN_TEXTL(u, s, l, t, b) RETURN_STRINGL(s, l, b)
#define UC_RETURN_EMPTY_TEXT(t) RETURN_EMPTY_STRING()
#endif /* ZEND_UNICODE_H */

#define UNICHAR_REGISTER_CATEGORY_CONSTANT(name) \
	REGISTER_LONG_CONSTANT("UCATEGORY_"#name, (long)U_##name, CONST_PERSISTENT | CONST_CS)

#define UNICHAR_REGISTER_BLOCK_CONSTANT(name) \
	REGISTER_LONG_CONSTANT("UBLOCK_"#name, (long)UBLOCK_##name, CONST_PERSISTENT | CONST_CS)

/* }}} */

/* {{{ private function prototypes */

static void
unichar_ucnv_open(unichar_ucnv_t *cnv, const char *name, UErrorCode *err TSRMLS_DC);

static void
unichar_ucnv_close(unichar_ucnv_t *cnv);

static void
unichar_unorm(INTERNAL_FUNCTION_PARAMETERS, UNormalizationMode mode);

static zval *
unichar_make_info(UChar32 codepoint, const char *str, size_t len TSRMLS_DC);

/* }}} */

/* {{{ unichar_register_icu_constants()
   */
static inline void
unichar_register_icu_constants(int module_number TSRMLS_DC)
{
	UVersionInfo versionArray;

	u_getVersion(versionArray);
	u_versionToString(versionArray, unichar_icu_library_version);
	REGISTER_STRING_CONSTANT("UNICHAR_ICU_VERSION",
			unichar_icu_library_version, CONST_PERSISTENT | CONST_CS);

	u_getUnicodeVersion(versionArray);
	u_versionToString(versionArray, unichar_icu_unicode_version);
	REGISTER_STRING_CONSTANT("UNICHAR_ICU_UNICODE_VERSION",
			unichar_icu_unicode_version, CONST_PERSISTENT | CONST_CS);

	/* {{{ Unicode Cateogries */
	UNICHAR_REGISTER_CATEGORY_CONSTANT(UNASSIGNED);
	UNICHAR_REGISTER_CATEGORY_CONSTANT(GENERAL_OTHER_TYPES);
	UNICHAR_REGISTER_CATEGORY_CONSTANT(UPPERCASE_LETTER);
	UNICHAR_REGISTER_CATEGORY_CONSTANT(LOWERCASE_LETTER);
	UNICHAR_REGISTER_CATEGORY_CONSTANT(TITLECASE_LETTER);
	UNICHAR_REGISTER_CATEGORY_CONSTANT(MODIFIER_LETTER);
	UNICHAR_REGISTER_CATEGORY_CONSTANT(OTHER_LETTER);
	UNICHAR_REGISTER_CATEGORY_CONSTANT(NON_SPACING_MARK);
	UNICHAR_REGISTER_CATEGORY_CONSTANT(ENCLOSING_MARK);
	UNICHAR_REGISTER_CATEGORY_CONSTANT(COMBINING_SPACING_MARK);
	UNICHAR_REGISTER_CATEGORY_CONSTANT(DECIMAL_DIGIT_NUMBER);
	UNICHAR_REGISTER_CATEGORY_CONSTANT(LETTER_NUMBER);
	UNICHAR_REGISTER_CATEGORY_CONSTANT(OTHER_NUMBER);
	UNICHAR_REGISTER_CATEGORY_CONSTANT(SPACE_SEPARATOR);
	UNICHAR_REGISTER_CATEGORY_CONSTANT(LINE_SEPARATOR);
	UNICHAR_REGISTER_CATEGORY_CONSTANT(PARAGRAPH_SEPARATOR);
	UNICHAR_REGISTER_CATEGORY_CONSTANT(CONTROL_CHAR);
	UNICHAR_REGISTER_CATEGORY_CONSTANT(FORMAT_CHAR);
	UNICHAR_REGISTER_CATEGORY_CONSTANT(PRIVATE_USE_CHAR);
	UNICHAR_REGISTER_CATEGORY_CONSTANT(SURROGATE);
	UNICHAR_REGISTER_CATEGORY_CONSTANT(DASH_PUNCTUATION);
	UNICHAR_REGISTER_CATEGORY_CONSTANT(START_PUNCTUATION);
	UNICHAR_REGISTER_CATEGORY_CONSTANT(END_PUNCTUATION);
	UNICHAR_REGISTER_CATEGORY_CONSTANT(CONNECTOR_PUNCTUATION);
	UNICHAR_REGISTER_CATEGORY_CONSTANT(OTHER_PUNCTUATION);
	UNICHAR_REGISTER_CATEGORY_CONSTANT(MATH_SYMBOL);
	UNICHAR_REGISTER_CATEGORY_CONSTANT(CURRENCY_SYMBOL);
	UNICHAR_REGISTER_CATEGORY_CONSTANT(MODIFIER_SYMBOL);
	UNICHAR_REGISTER_CATEGORY_CONSTANT(OTHER_SYMBOL);
	UNICHAR_REGISTER_CATEGORY_CONSTANT(INITIAL_PUNCTUATION);
	UNICHAR_REGISTER_CATEGORY_CONSTANT(FINAL_PUNCTUATION);
	/* }}} Unicode Cateogries */

	/* {{{ Unicode Blocks */
	UNICHAR_REGISTER_BLOCK_CONSTANT(NO_BLOCK);
	UNICHAR_REGISTER_BLOCK_CONSTANT(BASIC_LATIN);
	UNICHAR_REGISTER_BLOCK_CONSTANT(LATIN_1_SUPPLEMENT);
	UNICHAR_REGISTER_BLOCK_CONSTANT(LATIN_EXTENDED_A);
	UNICHAR_REGISTER_BLOCK_CONSTANT(LATIN_EXTENDED_B);
	UNICHAR_REGISTER_BLOCK_CONSTANT(IPA_EXTENSIONS);
	UNICHAR_REGISTER_BLOCK_CONSTANT(SPACING_MODIFIER_LETTERS);
	UNICHAR_REGISTER_BLOCK_CONSTANT(COMBINING_DIACRITICAL_MARKS);
	UNICHAR_REGISTER_BLOCK_CONSTANT(GREEK);
	UNICHAR_REGISTER_BLOCK_CONSTANT(CYRILLIC);
	UNICHAR_REGISTER_BLOCK_CONSTANT(ARMENIAN);
	UNICHAR_REGISTER_BLOCK_CONSTANT(HEBREW);
	UNICHAR_REGISTER_BLOCK_CONSTANT(ARABIC);
	UNICHAR_REGISTER_BLOCK_CONSTANT(SYRIAC);
	UNICHAR_REGISTER_BLOCK_CONSTANT(THAANA);
	UNICHAR_REGISTER_BLOCK_CONSTANT(DEVANAGARI);
	UNICHAR_REGISTER_BLOCK_CONSTANT(BENGALI);
	UNICHAR_REGISTER_BLOCK_CONSTANT(GURMUKHI);
	UNICHAR_REGISTER_BLOCK_CONSTANT(GUJARATI);
	UNICHAR_REGISTER_BLOCK_CONSTANT(ORIYA);
	UNICHAR_REGISTER_BLOCK_CONSTANT(TAMIL);
	UNICHAR_REGISTER_BLOCK_CONSTANT(TELUGU);
	UNICHAR_REGISTER_BLOCK_CONSTANT(KANNADA);
	UNICHAR_REGISTER_BLOCK_CONSTANT(MALAYALAM);
	UNICHAR_REGISTER_BLOCK_CONSTANT(SINHALA);
	UNICHAR_REGISTER_BLOCK_CONSTANT(THAI);
	UNICHAR_REGISTER_BLOCK_CONSTANT(LAO);
	UNICHAR_REGISTER_BLOCK_CONSTANT(TIBETAN);
	UNICHAR_REGISTER_BLOCK_CONSTANT(MYANMAR);
	UNICHAR_REGISTER_BLOCK_CONSTANT(GEORGIAN);
	UNICHAR_REGISTER_BLOCK_CONSTANT(HANGUL_JAMO);
	UNICHAR_REGISTER_BLOCK_CONSTANT(ETHIOPIC);
	UNICHAR_REGISTER_BLOCK_CONSTANT(CHEROKEE);
	UNICHAR_REGISTER_BLOCK_CONSTANT(UNIFIED_CANADIAN_ABORIGINAL_SYLLABICS);
	UNICHAR_REGISTER_BLOCK_CONSTANT(OGHAM);
	UNICHAR_REGISTER_BLOCK_CONSTANT(RUNIC);
	UNICHAR_REGISTER_BLOCK_CONSTANT(KHMER);
	UNICHAR_REGISTER_BLOCK_CONSTANT(MONGOLIAN);
	UNICHAR_REGISTER_BLOCK_CONSTANT(LATIN_EXTENDED_ADDITIONAL);
	UNICHAR_REGISTER_BLOCK_CONSTANT(GREEK_EXTENDED);
	UNICHAR_REGISTER_BLOCK_CONSTANT(GENERAL_PUNCTUATION);
	UNICHAR_REGISTER_BLOCK_CONSTANT(SUPERSCRIPTS_AND_SUBSCRIPTS);
	UNICHAR_REGISTER_BLOCK_CONSTANT(CURRENCY_SYMBOLS);
	UNICHAR_REGISTER_BLOCK_CONSTANT(COMBINING_MARKS_FOR_SYMBOLS);
	UNICHAR_REGISTER_BLOCK_CONSTANT(LETTERLIKE_SYMBOLS);
	UNICHAR_REGISTER_BLOCK_CONSTANT(NUMBER_FORMS);
	UNICHAR_REGISTER_BLOCK_CONSTANT(ARROWS);
	UNICHAR_REGISTER_BLOCK_CONSTANT(MATHEMATICAL_OPERATORS);
	UNICHAR_REGISTER_BLOCK_CONSTANT(MISCELLANEOUS_TECHNICAL);
	UNICHAR_REGISTER_BLOCK_CONSTANT(CONTROL_PICTURES);
	UNICHAR_REGISTER_BLOCK_CONSTANT(OPTICAL_CHARACTER_RECOGNITION);
	UNICHAR_REGISTER_BLOCK_CONSTANT(ENCLOSED_ALPHANUMERICS);
	UNICHAR_REGISTER_BLOCK_CONSTANT(BOX_DRAWING);
	UNICHAR_REGISTER_BLOCK_CONSTANT(BLOCK_ELEMENTS);
	UNICHAR_REGISTER_BLOCK_CONSTANT(GEOMETRIC_SHAPES);
	UNICHAR_REGISTER_BLOCK_CONSTANT(MISCELLANEOUS_SYMBOLS);
	UNICHAR_REGISTER_BLOCK_CONSTANT(DINGBATS);
	UNICHAR_REGISTER_BLOCK_CONSTANT(BRAILLE_PATTERNS);
	UNICHAR_REGISTER_BLOCK_CONSTANT(CJK_RADICALS_SUPPLEMENT);
	UNICHAR_REGISTER_BLOCK_CONSTANT(KANGXI_RADICALS);
	UNICHAR_REGISTER_BLOCK_CONSTANT(IDEOGRAPHIC_DESCRIPTION_CHARACTERS);
	UNICHAR_REGISTER_BLOCK_CONSTANT(CJK_SYMBOLS_AND_PUNCTUATION);
	UNICHAR_REGISTER_BLOCK_CONSTANT(HIRAGANA);
	UNICHAR_REGISTER_BLOCK_CONSTANT(KATAKANA);
	UNICHAR_REGISTER_BLOCK_CONSTANT(BOPOMOFO);
	UNICHAR_REGISTER_BLOCK_CONSTANT(HANGUL_COMPATIBILITY_JAMO);
	UNICHAR_REGISTER_BLOCK_CONSTANT(KANBUN);
	UNICHAR_REGISTER_BLOCK_CONSTANT(BOPOMOFO_EXTENDED);
	UNICHAR_REGISTER_BLOCK_CONSTANT(ENCLOSED_CJK_LETTERS_AND_MONTHS);
	UNICHAR_REGISTER_BLOCK_CONSTANT(CJK_COMPATIBILITY);
	UNICHAR_REGISTER_BLOCK_CONSTANT(CJK_UNIFIED_IDEOGRAPHS_EXTENSION_A);
	UNICHAR_REGISTER_BLOCK_CONSTANT(CJK_UNIFIED_IDEOGRAPHS);
	UNICHAR_REGISTER_BLOCK_CONSTANT(YI_SYLLABLES);
	UNICHAR_REGISTER_BLOCK_CONSTANT(YI_RADICALS);
	UNICHAR_REGISTER_BLOCK_CONSTANT(HANGUL_SYLLABLES);
	UNICHAR_REGISTER_BLOCK_CONSTANT(HIGH_SURROGATES);
	UNICHAR_REGISTER_BLOCK_CONSTANT(HIGH_PRIVATE_USE_SURROGATES);
	UNICHAR_REGISTER_BLOCK_CONSTANT(LOW_SURROGATES);
	UNICHAR_REGISTER_BLOCK_CONSTANT(PRIVATE_USE);
	UNICHAR_REGISTER_BLOCK_CONSTANT(PRIVATE_USE_AREA);
	UNICHAR_REGISTER_BLOCK_CONSTANT(CJK_COMPATIBILITY_IDEOGRAPHS);
	UNICHAR_REGISTER_BLOCK_CONSTANT(ALPHABETIC_PRESENTATION_FORMS);
	UNICHAR_REGISTER_BLOCK_CONSTANT(ARABIC_PRESENTATION_FORMS_A);
	UNICHAR_REGISTER_BLOCK_CONSTANT(COMBINING_HALF_MARKS);
	UNICHAR_REGISTER_BLOCK_CONSTANT(CJK_COMPATIBILITY_FORMS);
	UNICHAR_REGISTER_BLOCK_CONSTANT(SMALL_FORM_VARIANTS);
	UNICHAR_REGISTER_BLOCK_CONSTANT(ARABIC_PRESENTATION_FORMS_B);
	UNICHAR_REGISTER_BLOCK_CONSTANT(SPECIALS);
	UNICHAR_REGISTER_BLOCK_CONSTANT(HALFWIDTH_AND_FULLWIDTH_FORMS);
	UNICHAR_REGISTER_BLOCK_CONSTANT(OLD_ITALIC);
	UNICHAR_REGISTER_BLOCK_CONSTANT(GOTHIC);
	UNICHAR_REGISTER_BLOCK_CONSTANT(DESERET);
	UNICHAR_REGISTER_BLOCK_CONSTANT(BYZANTINE_MUSICAL_SYMBOLS);
	UNICHAR_REGISTER_BLOCK_CONSTANT(MUSICAL_SYMBOLS);
	UNICHAR_REGISTER_BLOCK_CONSTANT(MATHEMATICAL_ALPHANUMERIC_SYMBOLS);
	UNICHAR_REGISTER_BLOCK_CONSTANT(CJK_UNIFIED_IDEOGRAPHS_EXTENSION_B);
	UNICHAR_REGISTER_BLOCK_CONSTANT(CJK_COMPATIBILITY_IDEOGRAPHS_SUPPLEMENT);
	UNICHAR_REGISTER_BLOCK_CONSTANT(TAGS);
	UNICHAR_REGISTER_BLOCK_CONSTANT(CYRILLIC_SUPPLEMENTARY);
	UNICHAR_REGISTER_BLOCK_CONSTANT(CYRILLIC_SUPPLEMENT);
	UNICHAR_REGISTER_BLOCK_CONSTANT(TAGALOG);
	UNICHAR_REGISTER_BLOCK_CONSTANT(HANUNOO);
	UNICHAR_REGISTER_BLOCK_CONSTANT(BUHID);
	UNICHAR_REGISTER_BLOCK_CONSTANT(TAGBANWA);
	UNICHAR_REGISTER_BLOCK_CONSTANT(MISCELLANEOUS_MATHEMATICAL_SYMBOLS_A);
	UNICHAR_REGISTER_BLOCK_CONSTANT(SUPPLEMENTAL_ARROWS_A);
	UNICHAR_REGISTER_BLOCK_CONSTANT(SUPPLEMENTAL_ARROWS_B);
	UNICHAR_REGISTER_BLOCK_CONSTANT(MISCELLANEOUS_MATHEMATICAL_SYMBOLS_B);
	UNICHAR_REGISTER_BLOCK_CONSTANT(SUPPLEMENTAL_MATHEMATICAL_OPERATORS);
	UNICHAR_REGISTER_BLOCK_CONSTANT(KATAKANA_PHONETIC_EXTENSIONS);
	UNICHAR_REGISTER_BLOCK_CONSTANT(VARIATION_SELECTORS);
	UNICHAR_REGISTER_BLOCK_CONSTANT(SUPPLEMENTARY_PRIVATE_USE_AREA_A);
	UNICHAR_REGISTER_BLOCK_CONSTANT(SUPPLEMENTARY_PRIVATE_USE_AREA_B);
	UNICHAR_REGISTER_BLOCK_CONSTANT(LIMBU);
	UNICHAR_REGISTER_BLOCK_CONSTANT(TAI_LE);
	UNICHAR_REGISTER_BLOCK_CONSTANT(KHMER_SYMBOLS);
	UNICHAR_REGISTER_BLOCK_CONSTANT(PHONETIC_EXTENSIONS);
	UNICHAR_REGISTER_BLOCK_CONSTANT(MISCELLANEOUS_SYMBOLS_AND_ARROWS);
	UNICHAR_REGISTER_BLOCK_CONSTANT(YIJING_HEXAGRAM_SYMBOLS);
	UNICHAR_REGISTER_BLOCK_CONSTANT(LINEAR_B_SYLLABARY);
	UNICHAR_REGISTER_BLOCK_CONSTANT(LINEAR_B_IDEOGRAMS);
	UNICHAR_REGISTER_BLOCK_CONSTANT(AEGEAN_NUMBERS);
	UNICHAR_REGISTER_BLOCK_CONSTANT(UGARITIC);
	UNICHAR_REGISTER_BLOCK_CONSTANT(SHAVIAN);
	UNICHAR_REGISTER_BLOCK_CONSTANT(OSMANYA);
	UNICHAR_REGISTER_BLOCK_CONSTANT(CYPRIOT_SYLLABARY);
	UNICHAR_REGISTER_BLOCK_CONSTANT(TAI_XUAN_JING_SYMBOLS);
	UNICHAR_REGISTER_BLOCK_CONSTANT(VARIATION_SELECTORS_SUPPLEMENT);
#if UNICHAR_ICU_VERSION_NUMBER >= 34
	UNICHAR_REGISTER_BLOCK_CONSTANT(ANCIENT_GREEK_MUSICAL_NOTATION);
	UNICHAR_REGISTER_BLOCK_CONSTANT(ANCIENT_GREEK_NUMBERS);
	UNICHAR_REGISTER_BLOCK_CONSTANT(ARABIC_SUPPLEMENT);
	UNICHAR_REGISTER_BLOCK_CONSTANT(BUGINESE);
	UNICHAR_REGISTER_BLOCK_CONSTANT(CJK_STROKES);
	UNICHAR_REGISTER_BLOCK_CONSTANT(COMBINING_DIACRITICAL_MARKS_SUPPLEMENT);
	UNICHAR_REGISTER_BLOCK_CONSTANT(COPTIC);
	UNICHAR_REGISTER_BLOCK_CONSTANT(ETHIOPIC_EXTENDED);
	UNICHAR_REGISTER_BLOCK_CONSTANT(ETHIOPIC_SUPPLEMENT);
	UNICHAR_REGISTER_BLOCK_CONSTANT(GEORGIAN_SUPPLEMENT);
	UNICHAR_REGISTER_BLOCK_CONSTANT(GLAGOLITIC);
	UNICHAR_REGISTER_BLOCK_CONSTANT(KHAROSHTHI);
	UNICHAR_REGISTER_BLOCK_CONSTANT(MODIFIER_TONE_LETTERS);
	UNICHAR_REGISTER_BLOCK_CONSTANT(NEW_TAI_LUE);
	UNICHAR_REGISTER_BLOCK_CONSTANT(OLD_PERSIAN);
	UNICHAR_REGISTER_BLOCK_CONSTANT(PHONETIC_EXTENSIONS_SUPPLEMENT);
	UNICHAR_REGISTER_BLOCK_CONSTANT(SUPPLEMENTAL_PUNCTUATION);
	UNICHAR_REGISTER_BLOCK_CONSTANT(SYLOTI_NAGRI);
	UNICHAR_REGISTER_BLOCK_CONSTANT(TIFINAGH);
	UNICHAR_REGISTER_BLOCK_CONSTANT(VERTICAL_FORMS);
#endif /* ICU >= 3.4 (New blocks in Unicode 4.1) */
#if UNICHAR_ICU_VERSION_NUMBER >= 36
	UNICHAR_REGISTER_BLOCK_CONSTANT(NKO);
	UNICHAR_REGISTER_BLOCK_CONSTANT(BALINESE);
	UNICHAR_REGISTER_BLOCK_CONSTANT(LATIN_EXTENDED_C);
	UNICHAR_REGISTER_BLOCK_CONSTANT(LATIN_EXTENDED_D);
	UNICHAR_REGISTER_BLOCK_CONSTANT(PHAGS_PA);
	UNICHAR_REGISTER_BLOCK_CONSTANT(PHOENICIAN);
	UNICHAR_REGISTER_BLOCK_CONSTANT(CUNEIFORM);
	UNICHAR_REGISTER_BLOCK_CONSTANT(CUNEIFORM_NUMBERS_AND_PUNCTUATION);
	UNICHAR_REGISTER_BLOCK_CONSTANT(COUNTING_ROD_NUMERALS);
#endif /* ICU >= 3.6 (New blocks in Unicode 5.0) */
	/* }}} Unicode Blocks */
}
/* }}} */

#endif /* _PHP_UNICHAR_ICU_H_ */

/*
 * Local variables:
 * tab-width: 4
 * c-basic-offset: 4
 * End:
 * vim600: noet sw=4 ts=4 fdm=marker
 * vim<600: noet sw=4 ts=4
 */
